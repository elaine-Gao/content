{"version":3,"sources":["logo.svg","images/logo.png","components/CommonGround/CommonGround.js","components/Home/Home.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","section","React","Component","PageContainer","div","PageTitle","h1","Home","StyledNav","NavContainer","span","LinkContainer","LinkText","p","Header","img","FooterContent","Footer","AppWrapper","App","path","component","exact","Error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,4RCGpC,IAAMC,EAAYC,IAAOC,QAAV,KAKoBC,IAAMC,U,2UCLzC,IAAMC,EAAgBJ,IAAOK,IAAV,KASbC,EAAYN,IAAOO,GAAV,KAKDC,E,uKAEjB,OACI,kBAACJ,EAAD,KACI,kBAACE,EAAD,gC,GAJsBJ,IAAMC,W,86BCbxC,IAAMM,EAAYT,IAAOK,IAAV,KAOTK,EAAeV,IAAOW,KAAV,KASZC,EAAgBZ,IAAOW,KAAV,KAMbE,EAAWb,IAAOc,EAAV,KAmBOC,GAdCf,IAAOW,KAAV,KAQNX,IAAOgB,IAAV,K,uKAQN,OACE,kBAACP,EAAD,KAIA,kBAACC,EAAD,KAME,kBAACE,EAAD,KACE,kBAACC,EAAD,cAIF,kBAACD,EAAD,KACE,kBAACC,EAAD,eAIF,kBAACD,EAAD,KACE,kBAACC,EAAD,cAIF,kBAACD,EAAD,KACE,kBAACC,EAAD,sB,GA7B0BX,IAAMC,Y,4aC1C1C,IAAMM,EAAYT,IAAOK,IAAV,KAQTY,EAAgBjB,IAAOW,KAAV,KAMbE,EAAWb,IAAOc,EAAV,KAKOI,E,uKAEjB,OAAQ,kBAAC,EAAD,KACJ,kBAACD,EAAD,KACA,kBAAC,EAAD,gE,GAJ4Bf,IAAMC,W,6HCZnC,IAAMgB,EAAanB,IAAOK,IAAV,KAqBRe,MAjBf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,UAAWd,EAAMe,OAAK,IACtC,kBAAC,IAAD,CAAOD,UAAWE,WAIxB,kBAAC,EAAD,QCdcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7e523ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.04f0edb3.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nexport const Container = styled.section`\n    display: flex;\n    justify-content: space-between;\n`\n\nexport default class CommonGround extends React.Component {\n    render() {\n        return (\n            <Container>\n                Testing.1.2.3\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n    padding-left: 5em;\n    padding-right: 5em;\n    padding-top: 3em;\n    padding-bottom: 2em;\n    min-height: 100em;\n    text-align: left;\n`\n\nexport const PageTitle = styled.h1`\n    font-weight: 350;\n    color: #5E6472;\n`\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n        <PageContainer>\n            <PageTitle>\n                Hi, I'm Elaine Gao\n            </PageTitle>\n        </PageContainer>\n    )\n  }\n}","import React from 'react';\nimport logo from '../../images/logo.png';\nimport styled from 'styled-components';\n\nconst StyledNav = styled.div`\n  height: 5rem;\n  width: 100%\n  display: flex;\n  justify-content: space-between;\n  background-color: #F4E9CD;\n`\nconst NavContainer = styled.span`\n  display: flex;\n  justify-content: space-between;\n  display: flex;\n  justify-content: flex-end;\n  padding-right: 1rem;\n  width: 90% \n`\n\nconst LinkContainer = styled.span`\n  padding-top: 1rem;\n  padding-left: 1.5rem;\n  width: 5%;\n`\n\nconst LinkText = styled.p`\n  font-weight: 350;\n  color: #5E6472;\n`\n\nconst LogoContainer = styled.span`\n  width: 10% \n  margin-left: 2em;\n  padding-left: 2em;\n  padding-top: 0.8em;\n  opacity: 0.7;\n`\n\nconst Logo = styled.img`\n  width: 40px;\n  height: 40px;\n  padding-top: 0.2em;\n`\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <StyledNav>\n        {/* <a href=\"/\">\n            <Logo src={logo} />\n        </a> */}\n      <NavContainer>\n        {/* <LogoContainer>\n          <a href=\"/\">\n            <Logo src={logo} />\n          </a>\n        </LogoContainer> */}\n        <LinkContainer>\n          <LinkText>  \n            HOME\n          </LinkText>\n        </LinkContainer>\n        <LinkContainer>\n          <LinkText>  \n            ABOUT\n          </LinkText>\n        </LinkContainer>\n        <LinkContainer>\n          <LinkText>  \n            BLOG\n          </LinkText>\n        </LinkContainer>\n        <LinkContainer>\n          <LinkText>  \n            RESUME\n          </LinkText>\n        </LinkContainer>\n      </NavContainer>\n    </StyledNav>)\n  }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledNav = styled.div`\n  height: 8rem;\n  width: 100%\n  display: flex;\n  justify-content: center;\n  background-color: #5E6472;\n`\n\nconst FooterContent = styled.span`\n  padding-top: 2em;\n  display: flex;\n  justify-content: center;\n`\n\nconst LinkText = styled.p`\n  font-weight: 350;\n  color: #F4E9CD;\n`\n\nexport default class Footer extends React.Component {\n  render() {\n    return (<StyledNav>\n        <FooterContent>\n        <LinkText>\n        Made by Elaine Gao  Â·  gao.elaine164@gmail.com\n        </LinkText>\n        </FooterContent>\n    </StyledNav>)\n  }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport CommonGround from './components/CommonGround/CommonGround'\nimport Home from './components/Home/Home'\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  background-color: #F4E9CD;\n`\n\nfunction App() {\n  return (\n    <AppWrapper>\n      <Header></Header>\n      <HashRouter>\n        <div >\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </HashRouter>\n      <Footer/>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}